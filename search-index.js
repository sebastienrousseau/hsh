var searchIndex = JSON.parse('{\
"hsh":{"doc":"Quantum-Resistant Cryptographic Hash Library for Password …","t":"NNDEGNLMLLLLLLLLLLLLOLLLLLLLLLLLLOLLLLMLLLALOLLLLMLOLMLLLOLOLOLLLLOLLLLLLLLLOLL","n":["Argon2i","Bcrypt","Hash","HashAlgorithm","Salt","Scrypt","algorithm","algorithm","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","display_hash","eq","eq","fmt","fmt","fmt","fmt","from","from","from_hash","from_str","from_string","generate_hash","generate_hash","generate_salt","hash","hash","hash","hash","hash_length","into","into","macros","new","new_hash","parse_algorithm","partial_cmp","partial_cmp","password","password","password_length","password_length","salt","salt","serialize","serialize","set_hash","set_hash","set_password","set_password","set_salt","set_salt","to_owned","to_owned","to_string","to_string","to_string","to_string_representation","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify_password","verify_password","vzip","vzip"],"q":[[0,"hsh"]],"d":["Argon2i","Bcrypt","A struct for storing and verifying hashed passwords based …","The supported hash algorithms","A type alias for a salt.","Scrypt","Get the hash algorithm used by this hash","The hash algorithm used","","","","","","","","","","","","","This macro prints the hash of a given <code>Hash</code> struct instance …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the entropy of the hash in bits.","","Parses a <code>Hash</code> object from a hash string in the format used …","Generates a hash from a password, salt and algorithm type. …","This macro generates a new hash for a given password, …","Generates a salt string for password hashing using the …","","Returns the hash.","","The password hash.","Returns the length of the hash.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The <code>macros</code> module contains functions for generating macros.","Returns the password.","This macro creates a new instance of the <code>Hash</code> struct with …","Parses a hash string and returns the corresponding hash …","","","Returns the password.","The password.","Returns the password length.","This macro returns the length of the password for a given …","Returns the salt.","The salt used for hashing","","","Sets the hash.","This macro sets a new hash value for a given <code>Hash</code> struct …","Sets the password and generates a new hash.","This macro sets a new password, salt, and algorithm value …","Sets the salt.","This macro sets a new salt value for a given <code>Hash</code> struct …","","","","","This macro converts a given <code>Hash</code> struct instance to a …","Returns the hash as a string.","","","","","","","Verifies a password against the stored hash.","Verifies the password against the hash.","This macro verifies a given password against a given <code>Hash</code> …","",""],"i":[2,2,0,0,0,2,1,1,1,2,1,2,1,2,1,2,1,2,1,2,0,1,2,1,1,2,2,1,2,1,2,1,1,0,1,1,1,2,1,1,1,2,0,1,0,1,1,2,1,1,1,0,1,1,1,2,1,0,1,0,1,0,1,2,1,2,0,1,1,2,1,2,1,2,1,1,0,1,2],"f":[0,0,0,0,0,0,[1,2],0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[4,[[5,[1]]]],[4,[[5,[2]]]],0,[[1,1],6],[[2,2],6],[[1,7],8],[[1,7],8],[[2,7],8],[[2,7],8],[[]],[[]],[9,1],[9,[[5,[2]]]],[9,1],[[9,9,9],[[11,[10]]]],0,[9,12],[[1,13]],[1],[[2,13]],0,[1,14],[[]],[[]],0,[[9,9,9],1],0,[9,2],[[1,1],[[15,[3]]]],[[2,2],[[15,[3]]]],[1,9],0,[1,14],0,[1],0,[[1,16],5],[[2,16],5],[1],0,[[1,9,9,9]],0,[1],0,[[]],[[]],[[],12],[[],12],0,[1,12],[[],5],[[],5],[[],5],[[],5],[[],17],[[],17],[[1,9],6],[[1,9],6],0,[[]],[[]]],"c":[],"p":[[3,"Hash"],[4,"HashAlgorithm"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"u8"],[3,"Vec"],[3,"String"],[8,"Hasher"],[15,"usize"],[4,"Option"],[8,"Serializer"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
