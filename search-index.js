var searchIndex = JSON.parse('{\
"hsh":{"doc":"Quantum-Resistant Cryptographic Hash Library for Password …","t":"NNDEGNLMLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLMLOOOOOOOOOOOOOLLAOLOLLLLOFLMLLLLLLLOLLLLLLLLLLLL","n":["Argon2i","Bcrypt","Hash","HashAlgorithm","Salt","Scrypt","algorithm","algorithm","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_hash","from_str","from_string","generate_hash","generate_hash","generate_random_string","generate_salt","hash","hash","hash","hash","hash_length","hash_length","hsh","hsh_assert","hsh_contains","hsh_in_range","hsh_join","hsh_max","hsh_min","hsh_parse","hsh_print","hsh_print_vec","hsh_split","hsh_vec","into","into","macros","match_algo","new","new_hash","parse","parse_algorithm","partial_cmp","partial_cmp","random_string","run","salt","salt","serialize","serialize","set_hash","set_password","set_salt","to_owned","to_owned","to_str_error","to_string","to_string","to_string_representation","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip"],"q":[[0,"hsh"]],"d":["Argon2i: A memory-hard password hashing algorithm.","Bcrypt: A widely used password hashing algorithm.","A struct for storing and verifying hashed passwords based …","The supported hash algorithms Enum representing different …","A type alias for a salt.","Scrypt: A memory-hard password hashing algorithm.","A function that returns the hash algorithm used by the …","The hash algorithm used","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","A function that creates a new hash object from a hash …","","A function that creates a new hash object from a hash …","A function that generates a hash value for a password …","This macro generates a new hash for a given password, …","A function that generates a random string of the specified …","A function that generates a random salt for a password …","","A function that returns the hash value of a hash object.","","The password hash.","A function that returns the length of the hash value of a …","This macro returns the length of the password for a given …","This macro takes any number of arguments and parses them …","This macro asserts that the given condition is true. If the","This macro checks if the given string contains the given …","This macro checks if the given value is within the given …","This macro joins the given strings together with the given …","This macro finds the maximum value of the given values.","This macro finds the minimum value of the given values.","This macro attempts to parse the given input into a u64 …","This macro prints the given arguments to the console.","This macro prints the given vector of values to the …","This macro splits the given string into a vector of …","This macro creates a new vector with the given elements.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The <code>macros</code> module contains functions for generating macros.","This macro matches the hash algorithm strings to their …","A function that creates a new hash object from a password, …","This macro creates a new instance of the <code>Hash</code> struct with …","A function that parses a JSON string into a hash object.","A function that parses a hash string into a hash algorithm.","","","This macro generates a random string of the given length. …","This is the main entry point for the <code>Hash (HSH)</code> library.","A function that returns the salt used to hash a password.","The salt used for hashing","","","A function that sets the hash value of a hash object.","A function that sets the password of a hash object.","A function that sets the salt of a hash object.","","","This macro abstracts away the error handling for the …","","","A function that converts a hash object to a string …","","","","","","","A function that verifies a password against a hash object.","",""],"i":[2,2,0,0,0,2,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,1,1,0,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,1,0,1,1,1,2,0,0,1,1,1,2,1,1,1,1,2,0,1,2,1,1,2,1,2,1,2,1,1,2],"f":[0,0,0,0,0,0,[1,2],0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[4,[[5,[1]]]],[4,[[5,[2]]]],[[1,1],6],[[2,2],6],[[],6],[[],6],[[1,7],8],[[1,7],8],[[2,7],8],[[2,7],8],[[]],[[]],[[[10,[9]],11],[[5,[1,12]]]],[11,[[5,[2]]]],[11,[[5,[1,12]]]],[[11,11,11],[[5,[[13,[9]],12]]]],0,[14,12],[11,[[5,[12,12]]]],[[1,15]],[1,[[10,[9]]]],[[2,15]],0,[1,14],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,[[11,11,11],[[5,[1,12]]]],0,[11,[[5,[1,[17,[16]]]]]],[11,[[5,[2,12]]]],[[1,1],[[18,[3]]]],[[2,2],[[18,[3]]]],0,[[],[[5,[[17,[16]]]]]],[1,[[10,[9]]]],0,[[1,19],5],[[2,19],5],[[1,[10,[9]]]],[[1,11,11,11],[[5,[12]]]],[[1,[10,[9]]]],[[]],[[]],0,[[],12],[[],12],[1,12],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[1,11],[[5,[6,11]]]],[[]],[[]]],"c":[],"p":[[3,"Hash"],[4,"HashAlgorithm"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"slice"],[15,"str"],[3,"String"],[3,"Vec"],[15,"usize"],[8,"Hasher"],[8,"Error"],[3,"Box"],[4,"Option"],[8,"Serializer"],[3,"TypeId"]]},\
"xtask":{"doc":"xtask is a tool for running tasks in the workspace.","t":"F","n":["main"],"q":[[0,"xtask"]],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[3,"Error"],[4,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
