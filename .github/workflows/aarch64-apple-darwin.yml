name: ❯ macOS build 🍎 (aarch64-apple-darwin)
# On push to the main branch, build the project on 64-bit macOS on Apple Silicon
on:
  push:
    branches: ["**"]
jobs:
  # This job builds the project on 64-bit macOS on Apple Silicon
  build:
    name: ❯ build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
        fail-fast: false
        matrix:
          rust-toolchain:
            - stable
          target:
            # 64-bit macOS on Apple Silicon ✅ Tested
            - aarch64-apple-darwin

          include:
            # Linux targets 🐧
            - target: aarch64-apple-darwin
              os: ubuntu-latest
              cross: true
    runs-on: ${{ matrix.os }}

    steps:
      # Check out the repository code
      - name: Checkout sources
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # Install the stable Rust toolchain
      - name: Setup Rust
        id: setup-rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup default ${{ matrix.rust-toolchain }}

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      # Build the target
      - name: Build
        run: cargo build --release

      # Upload the binary for the target
      - name: Upload binary to GitHub Packages
        uses: actions/upload-artifact@v3
        with:
          name: hsh-${{ matrix.target }}-v${{ env.VERSION }}
          path: target/release/

      # Tar the binary for the target
      - name: Tar files
        run: tar -czvf hsh-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz target/release/

      # Upload the tarball for the target
      - name: Upload Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: hsh-${{ matrix.target }}-v${{ env.VERSION }}
          path: hsh-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz

      # Generate the artifact URL
      - name: Generate Artifact URL
        id: artifact-url
        run: |
          owner=${{ github.repository_owner }}
          repo=${{ github.repository }}
          release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$owner/$repo/releases/tags/hsh-${{ matrix.target }}-v${{ env.VERSION }}" | jq -r '.id')
          echo "https://github.com/$owner/$repo/releases/download/hsh-${{ matrix.target }}-v${{ env.VERSION }}/$owner-$repo-hsh-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz"
        shell: bash

      # Display the artifact upload success message
      - name: Display Artifact Upload Success Message
        run: |
          echo "Binary uploaded successfully for ${{ matrix.target }}. URL: ${{ steps.artifact-url.outputs.artifact_url }}"
          shell: /bin/bash -e {0}