searchState.loadedDescShard("hsh", 0, "Hash (HSH), a Quantum-Resistant Cryptographic Hash Library\nThe <code>algorithms</code> module contains the password hashing …\nThis macro generates a new hash for a given password, …\nThis macro returns the length of the password for a given …\nThis macro takes any number of arguments and parses them …\nThis macro asserts that the given condition is true. If the\nThis macro checks if the given string contains the given …\nThis macro checks if the given value is within the given …\nThis macro joins the given strings together with the given …\nThis macro finds the maximum value of the given values.\nThis macro finds the minimum value of the given values.\nThis macro attempts to parse the given input into a u64 …\nThis macro prints the given arguments to the console.\nThis macro prints the given vector of values to the …\nThis macro splits the given string into a vector of …\nThis macro creates a new vector with the given elements.\nMacros related to executing shell commands.\nThe <code>macros</code> module contains functions for generating macros.\nThis macro matches the hash algorithm strings to their …\nThe <code>models</code> module contains the data models for the library.\nThis macro creates a new instance of the <code>Hash</code> struct with …\nThis macro generates a random string of the given length. …\nThis is the main entry point for the <code>Hash (HSH)</code> library.\nThis macro abstracts away the error handling for the …\nThe <code>argon2i</code> module contains the Argon2i password hashing …\nThe <code>bcrypt</code> module contains the Bcrypt password hashing …\nThe <code>scrypt</code> module contains the Scrypt password hashing …\nImplementation of the Argon2i hashing algorithm.\nReturns the argument unchanged.\nHashes a given password using the Argon2i algorithm.\nCalls <code>U::from(self)</code>.\nImplementation of the Bcrypt hashing algorithm.\nReturns the argument unchanged.\nHashes a given password using the Bcrypt algorithm.\nCalls <code>U::from(self)</code>.\nImplementation of the Scrypt hashing algorithm.\nReturns the argument unchanged.\nHashes a given password using the Scrypt algorithm.\nCalls <code>U::from(self)</code>.\nThe <code>data</code> module contains the structs.\nThe <code>hash_algorithm</code> module contains the <code>HashAlgorithm</code> enum.\nA struct for storing and verifying hashed passwords. It …\nA builder struct for the <code>Hash</code> struct. It contains optional …\nA type alias for a salt.\nA function that returns the hash algorithm used by the …\nSets the <code>algorithm</code> field in the builder. The <code>self</code> …\nThe hash algorithm used.\nConsumes the builder and returns a <code>Hash</code> if all fields are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nA function that creates a new hash object from a hash …\nA function that creates a new hash object from a hash …\nA function that generates a hash value for a password …\nA function that generates a random string of the specified …\nA function that generates a random salt for a password …\nA function that returns the hash value of a hash object.\nSets the <code>hash</code> field in the builder. The <code>self</code> parameter is …\nThe password hash.\nA function that returns the length of the hash value of a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA function that creates a new hash object from a password, …\nCreates a new <code>HashBuilder</code> with all fields set to <code>None</code>.\nCreates a new <code>Hash</code> instance using Argon2i algorithm for …\nCreates a new <code>Hash</code> instance using Bcrypt algorithm for …\nCreates a new <code>Hash</code> instance using Scrypt algorithm for …\nA function that parses a JSON string into a hash object.\nA function that parses a hash string into a hash algorithm.\nA function that returns the salt used to hash a password.\nSets the <code>salt</code> field in the builder. The <code>self</code> parameter is …\nThe salt used for hashing.\nA function that sets the hash value of a hash object.\nA function that sets the password of a hash object.\nA function that sets the salt of a hash object.\nA function that converts a hash object to a string …\nA function that verifies a password against a hash object.\nArgon2i - A memory-hard password hashing algorithm.\nBcrypt - A widely used, computationally intensive password …\nRepresents the different algorithms available for password …\nRepresents a generic hashing algorithm.\nScrypt - A memory-hard password hashing algorithm designed …\nReturns the argument unchanged.\nHashes a given password using a specific salt.\nCalls <code>U::from(self)</code>.")